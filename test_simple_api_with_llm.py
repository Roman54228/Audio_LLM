#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è simple_api —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ YandexGPT
"""

import requests
import json
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_URL = "http://localhost:8000"
AUDIO_FILE = "tone/dropout.wav"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT
YANDEX_API_KEY = os.environ.get("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.environ.get("YANDEX_FOLDER_ID", "b1gd0b1ls413o390fmqk")

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...")
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"   Pipeline –∑–∞–≥—Ä—É–∂–µ–Ω: {data['pipeline_loaded']}")
            print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {data['uptime']:.2f}—Å")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_transcribe(audio_file):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    print(f"\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: {audio_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(audio_file):
        print(f"‚ùå –§–∞–π–ª {audio_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(audio_file, 'rb') as f:
            files = {'file': f}
            data = {'language': 'ru'}
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            response = requests.post(
                f"{API_URL}/transcribe",
                files=files,
                data=data,
                timeout=300  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            if result:
                for i, phrase in enumerate(result, 1):
                    print(f"   {i}. {phrase['text']}")
                    print(f"      –í—Ä–µ–º—è: {phrase['start_time']:.2f}—Å - {phrase['end_time']:.2f}—Å")
            else:
                print("   (–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω)")
            
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def correct_transcription_errors(transcribed_text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —á–µ—Ä–µ–∑ YandexGPT"""
    print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    full_text = " ".join([phrase['text'] for phrase in transcribed_text])
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not YANDEX_API_KEY:
            print("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return full_text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫
        payload = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                "maxTokens": "1000"
            },
            "messages": [
                {
                    "role": "system",
                    "text": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å —Ä–µ—á–∏. –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –ù–ï –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –∏—Å–ø—Ä–∞–≤—å –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏."
                },
                {
                    "role": "user",
                    "text": f"–ò—Å–ø—Ä–∞–≤—å –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —ç—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ:\n\n{full_text}\n\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                }
            ]
        }
        
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {YANDEX_API_KEY}"
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, headers=headers, json=payload, timeout=15)
        
        if response.status_code == 200:
            result = response.json()
            if 'result' in result and 'alternatives' in result['result']:
                corrected_text = result['result']['alternatives'][0]['message']['text'].strip()
                
                print("‚úÖ –û–ø–µ—á–∞—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª: {full_text}")
                print(f"‚úèÔ∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {corrected_text}")
                
                return corrected_text
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT.")
                return full_text
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API YandexGPT: {response.status_code} - {response.text}")
            return full_text
        
    except requests.exceptions.Timeout:
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT (15 —Å–µ–∫—É–Ω–¥)")
        return full_text
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—á–∞—Ç–æ–∫: {e}")
        return full_text

def send_to_yandex_gpt(transcribed_text, corrected_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"\nü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not YANDEX_API_KEY:
            print("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT (—Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–∑ yandex_gpt_helper.py)
        payload = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.6,
                "maxTokens": "2000"
            },
            "messages": [
                {
                    "role": "system",
                    "text": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Senior ML engineer, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.\n\n–¢—ã –¥–æ–ª–∂–µ–Ω:\n1. –ù–∞—á–∞—Ç—å —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ\n2. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –°–û–î–ï–†–ñ–ê–ù–ò–ò –æ—Ç–≤–µ—Ç–∞, –∞ –ù–ï –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑–ª–æ–∂–µ–Ω–∏—è\n3. –£–∫–∞–∑–∞—Ç—å –Ω–∞ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç –ù–ï —É–ø–æ–º—è–Ω—É–ª\n4. –î–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–≥–ª—É–±–ª–µ–Ω–∏—é –∑–Ω–∞–Ω–∏–π\n5. –û—Ü–µ–Ω–∏—Ç—å –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–º—ã\n6. –í –ö–û–ù–¶–ï –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å\n\n–ù–ï –∫—Ä–∏—Ç–∏–∫—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑–ª–æ–∂–µ–Ω–∏—è, —Å—Ç–∏–ª—å —Ä–µ—á–∏ –∏–ª–∏ –º–µ–ª–∫–∏–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –∑–Ω–∞–µ—Ç/–Ω–µ –∑–Ω–∞–µ—Ç –ø–æ —Ç–µ–º–µ, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –∫–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –º–æ–≥ –±—ã –¥–æ–±–∞–≤–∏—Ç—å."
                },
                {
                    "role": "user",
                    "text": f"–í–æ—Ç –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ ML (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å –∞—É–¥–∏–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç –æ–ø–µ—á–∞—Ç–æ–∫):\n\n{corrected_text}\n\n–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É. –ù–∞—á–Ω–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∑–∞—Ç–µ–º —É–∫–∞–∂–∏ –Ω–∞ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ —É–ø–æ–º—è–Ω—É–ª, –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–≥–ª—É–±–ª–µ–Ω–∏—é –∑–Ω–∞–Ω–∏–π. –ù–ï –∫—Ä–∏—Ç–∏–∫—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑–ª–æ–∂–µ–Ω–∏—è. –í –∫–æ–Ω—Ü–µ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
                }
            ]
        }
        
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {YANDEX_API_KEY}"
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ YandexGPT...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, headers=headers, json=payload, timeout=20)
        
        if response.status_code == 200:
            result = response.json()
            if 'result' in result and 'alternatives' in result['result']:
                llm_response = result['result']['alternatives'][0]['message']['text']
                
                print("‚úÖ YandexGPT –æ—Ç–≤–µ—Ç–∏–ª!")
                print(f"\nüß† –û—Ç–≤–µ—Ç YandexGPT:")
                print(f"   {llm_response}")
                
                return llm_response
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT.")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API YandexGPT: {response.status_code} - {response.text}")
            return None
        
    except requests.exceptions.Timeout:
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT (20 —Å–µ–∫—É–Ω–¥)")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Simple API —Å YandexGPT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT
    if not YANDEX_API_KEY:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è YandexGPT!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_API_KEY")
        print("   –ù–∞–ø—Ä–∏–º–µ—Ä: export YANDEX_API_KEY='your-api-key'")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    if not test_health():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        print("   docker run -p 8000:8000 -v ./models:/models t-one")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    transcribed_result = test_transcribe(AUDIO_FILE)
    
    if transcribed_result:
        # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏
        corrected_text = correct_transcription_errors(transcribed_result)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        llm_response = send_to_yandex_gpt(transcribed_result, corrected_text)
        
        if llm_response:
            print("\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("   –ê—É–¥–∏–æ ‚Üí –¢–µ–∫—Å—Ç ‚Üí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ ‚Üí YandexGPT ‚Üí –û—Ç–≤–µ—Ç")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT")
    else:
        print("\n‚ùå –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")

if __name__ == "__main__":
    main()
